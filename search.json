[{"title":"蓄水池算法（Reservoir Sampling)","date":"2023-02-04T09:01:50.000Z","url":"/2023/02/04/%E8%93%84%E6%B0%B4%E6%B1%A0%E7%AE%97%E6%B3%95/","tags":[["学习","/tags/%E5%AD%A6%E4%B9%A0/"],["算法","/tags/%E7%AE%97%E6%B3%95/"],["随机抽样","/tags/%E9%9A%8F%E6%9C%BA%E6%8A%BD%E6%A0%B7/"]],"categories":[["学习","/categories/%E5%AD%A6%E4%B9%A0/"],["算法","/categories/%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95/"]],"content":"算法用于在一个未知长度的序列中随机取出某个或某些样本 其中每个样本被取出的概率均为 1/n 算法 假设数据序列的规模为 n，需要采样的数量的为 k。 首先构建一个可容纳 k 个元素的数组，将序列的前 k 个元素放入数组中。 然后从第 k+1 个元素开始，以 k/n 的概率来决定该元素最后是否被留在数组中（每进来一个新的元素，数组中的每个旧元素被替换的概率是相同的）。 当遍历完所有元素之后，数组中剩下的元素即为所需采取的样本。 证明①对于数组中第 i 个数据（i ≤ k）。在 k 步之前，被选中的概率为 1。 当第 k+1 步时，被第 k+1 个数据替换的概率 = 第k+1个元素被选中的概率 * 第i个数 被选中替换的概率，即为则其被保留（取到）的概率为 依次类推，在不被第 k + 1 个元素替换的前提下，不被第k+2 个数据替换的条件概率为则运行到第 n 步时，被保留的概率: ②对于第 j 个数据（j &gt; k）。第 j个数据被选中的概率为 k / j。不被第 j + 1 个元素替换的概率为则运行到第 n步时，被保留的概率 = 被选中的概率 * 不被替换的概率，即条件概率的连乘） 代码实现一些辅助函数 初始化样本数据 抽样过程 封装为类 封装为类之后每次更新值的时候使用update成员函数即可 为支持多种类型，也可以使用泛型类"},{"title":"Kook主题修改指南","date":"2023-02-04T02:17:02.000Z","url":"/2023/02/04/Kook%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9%E6%8C%87%E5%8D%97/","tags":[["electron","/tags/electron/"],["kook","/tags/kook/"],["逆向","/tags/%E9%80%86%E5%90%91/"],["js","/tags/js/"],["css","/tags/css/"]],"categories":[["学习","/categories/%E5%AD%A6%E4%B9%A0/"],["逆向","/categories/%E5%AD%A6%E4%B9%A0/%E9%80%86%E5%90%91/"],["electron","/categories/%E5%AD%A6%E4%B9%A0/%E9%80%86%E5%90%91/electron/"],["kook","/categories/%E5%AD%A6%E4%B9%A0/%E9%80%86%E5%90%91/electron/kook/"]],"content":"因为kook是electron编写的 我们可以很方便的去修改界面样式或者加减功能(大部分情况下) 定位文件 文件 路径 index.htm C:\\Users\\14368\\AppData\\Local\\KOOK\\app-0.63.0\\resources\\app\\webapp\\build\\index.htm main.js C:\\Users\\14368\\AppData\\Local\\KOOK\\app-0.63.0\\resources\\app\\src\\main.js index.{一串随机值}.js 打开index.htm看 注入样式打开 index.htm 在head添加一行&lt;link href=\"/app/static/css/inject.css\" rel=\"stylesheet\"&gt;这里的inject.css是我们之后要新建的文件,路径为app-0.63.0\\resources\\app\\webapp\\build\\static\\css\\inject.css我修改后的版本如下 这是折叠内容 其中 是我自己用nginx重定向了一个文件如果不需要自定义背景,可以删除这些 添加主题切换功能找到index.{一串随机值}.js用vscode格式化一下,搜索win-logo把onClick:后面的那一串替换为 保存即可 测试重启kook,点击左上角的kook Logo即可更换主题 现有的问题是 kook在一段时间后如果发现你的主题是黑但是实际是白就回给你切换回去,但是自定义主题不受影响 启动时还是默认主题 "},{"date":"2023-02-03T15:10:48.000Z","url":"/2023/02/03/hexo%E5%9B%BE%E5%83%8F%E9%97%AE%E9%A2%98/","categories":[["undefined",""]],"content":"hexo的图像到底是怎么存的,一开独立资源文件夹markdown编辑器就看不了图像"},{"title":"余弦相似度","date":"2023-02-03T14:33:13.000Z","url":"/2023/02/03/%E4%BD%99%E5%BC%A6%E7%9B%B8%E4%BC%BC%E5%BA%A6/","tags":[["学习","/tags/%E5%AD%A6%E4%B9%A0/"],["算法","/tags/%E7%AE%97%E6%B3%95/"],["机器学习","/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"],["文本相似度","/tags/%E6%96%87%E6%9C%AC%E7%9B%B8%E4%BC%BC%E5%BA%A6/"]],"categories":[["学习","/categories/%E5%AD%A6%E4%B9%A0/"],["算法","/categories/%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95/"]],"content":"余弦相似性通过测量两个向量的夹角的余弦值来度量它们之间的相似性。0度角的余弦值是1，而其他任何角度的余弦值都不大于1；并且其最小值是-1。从而两个向量之间的角度的余弦值确定两个向量是否大致指向相同的方向。两个向量有相同的指向时，余弦相似度的值为1；两个向量夹角为90°时，余弦相似度的值为0；两个向量指向完全相反的方向时，余弦相似度的值为-1。这结果是与向量的长度无关的，仅仅与向量的指向方向相关。余弦相似度通常用于正空间，因此给出的值为-1到1之间。 注意这上下界对任何维度的向量空间中都适用，而且余弦相似性最常用于高维正空间。例如在信息检索中，每个词项被赋予不同的维度，而一个维度由一个向量表示，其各个维度上的值对应于该词项在文档中出现的频率。余弦相似度因此可以给出两篇文档在其主题方面的相似度。 另外，它通常用于文本挖掘中的文件比较。此外，在数据挖掘领域中，会用到它来度量集群内部的凝聚力。 [1] 定义两个向量间的余弦值可以通过使用欧几里得点积公式求出： 给定两个属性向量，A和B，其余弦相似性θ由点积和向量长度给出，如下所示： 这里的 分别代表向量A和B的各分量。 性质余弦值的范围在[-1,1]之间，值越趋近于1，代表两个向量的方向越接近；越趋近于-1，他们的方向越相反；接近于0，表示两个向量近乎于正交 应用计算文本相似度 应用举例（文本相似度计算）算法 分词 合并 计算特征值 向量化 计算向量夹角余弦值 对于两段文本A和B，对其进行分词，得到两个词列表： 对两个词列表进行合并去重，得到输入样本中的所有词： 计算特征值： 选取词频作为特征值 向量化 计算余弦值 例分词 合并并去重 特征值（词频）计算 向量化 计算余弦 AB的夹角的余弦更趋近于1，所以相似度更高。 "},{"title":"流水线","date":"2023-02-03T14:24:16.000Z","url":"/2023/02/03/%E6%B5%81%E6%B0%B4%E7%BA%BF/","tags":[["学习","/tags/%E5%AD%A6%E4%B9%A0/"],["计算机组成原理","/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"]],"categories":[["学习","/categories/%E5%AD%A6%E4%B9%A0/"],["计算机组成原理","/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"]],"content":"流水线在计算机体系结构中，并行性的最早应用之一是使用流水线将一个复杂的操作分成一系列独立的段，如果不同的段使用不同的资源，且它的前一个操作完成了第一段，立即启动一个操作，这样就能重复执行其他的操作。 流水包括下面的这些级： 取指令（IF） 指令译码（ID） 执行（EX） 存储访间（MEM） 回写（WB） 取指和译码是自明的。为执行的目的，将EX和MEM级组织在一起。 如果指令是一条寄存器到寄存器操作，它能在算术逻辑部件(ALU)中实施，则这一条指令在EX级完成。 如果它是一条存储访问指令，则地址计算在EX级实现，而存储访问实际上是在MEM级发生。 注意，如果需要的存储单元不在高速缓存中，出现不命中，那么这条指令将停顿（stall）直到将需要的块(block)装人高速缓存中。如果指令是分支指令，那么在执行阶段用一个指定寄存器与0比较并在MEM级将PC置成正确的值。WB级用来将数据写回到寄存器中；在分支指令中不使用它。 例子ADD R1, R2, R3 SUB R4, R1, R5 这样的指令序列能没有延地被执行，因为加法指令的结果是直接被送到减法指令的执行级，而不用等待回写到寄存器中。然而，这在 LW R1, 0(R2) ADD R3, R1, R4 序列是不可能的，因为在存储周期结束前，取数指令的结果是不可能得到的。因此，我们看到如下图所描绘的一个周期的停顿。 在上面load和add指令之间插人一条这样的指令，它不使用那个正在取数的寄存器，编译器调度就能消除此问题。 A+B+C 其中浮点加的流水线需要两级。如果按从左到右的顺序对表达式求值，那么第二条加法指令在执行前将不得不等待一个周期，如下图所示。 "},{"title":"搭建博客的过程","date":"2023-01-31T04:42:02.000Z","url":"/2023/01/31/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/","tags":[["web","/tags/web/"],["blog","/tags/blog/"],["github-pages","/tags/github-pages/"],["hexo","/tags/hexo/"]],"categories":[["学习","/categories/%E5%AD%A6%E4%B9%A0/"],["hexo","/categories/%E5%AD%A6%E4%B9%A0/hexo/"]],"content":"搭个锤子,先⚪(bushi) github准备工作先创建一个空的仓库,注意格式用户名.github.io hexo安装node使用hexo需要先安装nodejs,选最新版安装就行 安装hexo 新建博客 新建文章 配置主题主题可以在_config.yaml找到找到喜欢的主题之后clone到themes目录下即可然后把_config.yaml中 改为你的主题目录名字 本地预览 生成 上传GitHub安装插件 然后 需要登录的话网页授权一下就行 关于数学公式 网上查了查主要是先替换默认渲染器为kramed(但是我推荐后面装插件的方法) 然后配置主题 我换了之后好像没什么用 然后找到了另一个 这个是可以用的,但是每次要写一大串东西比较麻烦 所以我又安装了 然后在文章开始处配置 "},{"title":"friends","date":"2023-01-31T02:10:34.000Z","url":"/2023/01/31/friends/","categories":[["undefined",""]]},{"title":"Hello World","date":"2023-01-30T17:35:55.366Z","url":"/2023/01/31/hello-world/","tags":[["咕咕咕","/tags/%E5%92%95%E5%92%95%E5%92%95/"]],"categories":[["undefined",""]],"content":"从今天开始，我也是有博客的人啦（雾） 先存一些模板以后用（一个完整的 Front-Matter 区样式 提示信息喵呼呼o(=•ェ•=)m 成功啦o(￣▽￣)ブ 有危险Σ(っ °Д °;)っ 有消息(・∀・(・∀・(・∀・*) 当心哦≧ ﹏ ≦ 折叠内容 这是打开的可折叠内容 被折叠的内容 1被折叠的内容 2… 这是折叠内容 被折叠的内容 1被折叠的内容 2… 提示内容 面板框的标题 面板里的内容 1面板里的内容 2…TYPE是面板框的类型，可以是： success danger info warning 模糊字符这里有一些被模糊的字符 以上来源于Kratos-Rebirth文档 math c=±a2+b21x2−1c = \\pm\\sqrt{a^2 + b^2}\\frac{1}{x^2-1}c=±a2+b2​x2−11​ 但是上面那2个样式有点问题 "}]