[{"content":"起因 老婆在玩如鸳，刷本，mumu模拟器老卡死\n我就想着NAS都装好了，不搞个安卓虚拟机岂不是亏了（\n准备 官网下载安装镜像BlissOS\n我选择的是Zenith（基于最新版本）Gapps（谷歌全家桶）版\n创建虚拟机 显卡记得选VIrGL GPU，否则进不去系统。新的pve需要 apt install libgl1 libegl1\n内存建议8G起步（玩游戏的话）4G能跑，之后一路下一步即可\n安装 装之前可以进Live看一眼功能是否正常，我就不看了\n分区 进入之后会到UEFI分区界面，需要创建两个分区\nGPT格式\nEFI（1G） Linux Filesystem（剩下的空间） 选择cfdisk\n选择GPT\n使用New创建两个分区\n在第一个分区用选择EFI system\n选择，输入 yes完成分区\n安装 以此选择第一个分区和第二个分区，每次都选择格式化，第二个格式化为ext4，期间所有提示都选择接受/OK即可\nOTA更新（选No）谁家好人要电脑上装OTA啊（\n引导选择rEFInd（我grub2用不了）\n选择重启即可\n可能的问题 有可能某些地方没设置好导致无法进入引导，可以一直插着ISO，然后在安装界面选择最下面的\n就可以成功进入引导了\n启动 成功啦\n非常可惜的是KernelSU烂掉了\nscrcpy，非常流畅\n修复root /system/bin/su It works on my machine ¯\\_(ツ)_/¯\nsyscall_hardening=off(失败) 起一个进入 DEBUG live（假设你的ISO还没拔掉）\n挂载 /dev/sda1到随便什么地方，找到 android.cfg\nBlissOS（最外层）的 options加 syscall_hardening=off\n还是不行，放弃\n调整分辨率 rootshell 执行 /system/bin/wmsize 900x1600 （绝对路径）\n好啦，刷本吧，哈哈\nfin ","date":"2025-03-20T00:34:15+08:00","permalink":"/p/pve-%E5%AE%89%E8%A3%85-blissos-zenith%E5%AE%89%E5%8D%9313/","title":"Pve 安装 BlissOS Zenith（安卓13）"},{"content":"还没到货，到了再编辑\n物料清单 主要参考了 一起玩NAS!\n物料 价格 渠道 备注 金河田N1 119 淘宝 i3-12300T 690 淘宝 PRIME H610M-A D4 699 京东 利民 AXP90-X36 149 京东 英睿达32G x2 793 京东 全汉MS450 369 京东 致态TiPlus7100 527 京东 西数矿盘16T WUH721816ALE6L4 935 淘宝 便宜\u0026hellip;.. 还有不少东西，之后再补\n系统 PVE All In One\n","date":"2025-03-06T22:17:24+08:00","image":"/p/%E4%B8%80%E5%8F%B0nas%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/cover_hu_5613417e6306c3ea.png","permalink":"/p/%E4%B8%80%E5%8F%B0nas%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/","title":"一台Nas搭建记录"},{"content":" Cross-origin resource sharing（CORS，或通俗地译为跨域资源共享）是一种基于HTTP 头的机制，该机制通过允许服务器标示除了它自己以外的其他源（域、协议或端口），使得浏览器允许这些源访问加载自己的资源\n同源策略 用于限制一个源的文档或者它加载的脚本如何能与另一个源的资源进行交互。\n只有满足以下条件的请求才是同源的：\n协议相同（file://被视作非同源，无论路径是否一致，但某些浏览器处理方式可能不同） 域名相同 端口相同 出于安全性，浏览器限制脚本内发起的跨源 HTTP 请求。例如，XMLHttpRequest 和 Fetch API 遵循同源策略。这意味着使用这些 API 的 Web 应用程序只能从加载应用程序的同一个域请求 HTTP 资源，除非响应报文包含了正确 CORS 响应头。\nCORS 响应头 1 Access-Control-Allow-Origin: \u0026lt;origin\u0026gt; | * 告诉浏览器允许那些源访问资源，*表示允许所有源访问\n1 Access-Control-Expose-Headers: \u0026lt;header-name\u0026gt;[, \u0026lt;header-name\u0026gt;]* 告诉浏览器哪些响应头可以暴露给外部脚本，默认情况下，浏览器不允许外部脚本访问响应头，除非响应头中包含 Access-Control-Expose-Headers 头，并且该头中包含要暴露的响应头名称。\n1 Access-Control-Allow-Methods: \u0026lt;method\u0026gt;[, \u0026lt;method\u0026gt;]* 允许的请求方法，默认情况下，浏览器不允许外部脚本发起除 GET、HEAD、POST (简单请求) 外的请求，除非响应头中包含 Access-Control-Allow-Methods 头，并且该头中包含要允许的请求方法名称。\n1 Access-Control-Allow-Headers: \u0026lt;header-name\u0026gt;[, \u0026lt;header-name\u0026gt;]* 用于预检请求的响应。其指明了实际请求中允许携带的标头字段。 这个标头是服务器端对浏览器端 Access-Control-Request-Headers 标头的响应。\n踩坑 在执行跨域请求的时候，其实并不是只需要设置预检请求的响应头，还需要设置实际的请求的响应头。 拿保安和办公室举个例子：当你进别的公司办事时需要问保安，还需要里面的人同意\n本来如果要用插件的话应该会帮你处理好这些，但是我在用goproxy做一些mitm妙妙操作，所有请求都需要自己处理 折腾了半天才发现是只对OPTIONS做了添加请求头处理😭\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 func (p *proxyContext) makeProxyServer() *goproxy.ProxyHttpServer { proxy := goproxy.NewProxyHttpServer() proxy.Verbose = false filter := goproxy.ReqHostMatches(regexp.MustCompile(`xxx`)) proxy.OnRequest(filter).HandleConnect(goproxy.AlwaysMitm) proxy.OnRequest(filter).DoFunc(func(req *http.Request, ctx *goproxy.ProxyCtx) (*http.Request, *http.Response) { if req.Method == \u0026#34;OPTIONS\u0026#34; { Log(LogLevelInfo, \u0026#34;OPTIONS (已忽略)\u0026#34;) // 使用 204 No Content 作为标准响应状态码 resp := goproxy.NewResponse( req, goproxy.ContentTypeText, // 自动设置为 \u0026#34;text/plain\u0026#34; http.StatusNoContent, // 204 \u0026#34;\u0026#34;, ) resp.Header.Set(\u0026#34;Access-Control-Allow-Origin\u0026#34;, \u0026#34;*\u0026#34;) resp.Header.Set(\u0026#34;Access-Control-Allow-Methods\u0026#34;, \u0026#34;POST, GET, OPTIONS\u0026#34;) resp.Header.Set(\u0026#34;Access-Control-Allow-Headers\u0026#34;, \u0026#34;Content-Type, Authorization\u0026#34;) resp.Header.Set(\u0026#34;Vary\u0026#34;, \u0026#34;Origin, Access-Control-Request-Headers\u0026#34;) return req, resp } path := req.URL.Path switch { case strings.HasPrefix(path, \u0026#34;activate\u0026#34;): b, _ := io.ReadAll(req.Body) g := gjson.ParseBytes(b) resp := goproxy.NewResponse(req, \u0026#34;application/json\u0026#34;, http.StatusOK, makeFakeBody(g.Get(\u0026#34;license_key\u0026#34;).String(), \u0026#34;?\u0026#34;)) resp.Header.Set(\u0026#34;Access-Control-Allow-Origin\u0026#34;, \u0026#34;*\u0026#34;) resp.Header.Set(\u0026#34;Access-Control-Allow-Methods\u0026#34;, \u0026#34;POST, GET, OPTIONS\u0026#34;) resp.Header.Set(\u0026#34;Access-Control-Allow-Headers\u0026#34;, \u0026#34;Content-Type, Authorization\u0026#34;) resp.Header.Set(\u0026#34;Vary\u0026#34;, \u0026#34;Origin, Access-Control-Request-Headers\u0026#34;) return req, resp } return req, nil }) return proxy } 写的略丑，能跑就行（\n","date":"2025-03-06T21:12:09+08:00","permalink":"/p/cors%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/","title":"CORS踩坑记录"},{"content":"带/表示里面的内容 不带/表示一个文件/文件夹\n","date":"2024-12-08T15:20:48+08:00","permalink":"/p/rsync-/-%E7%BB%93%E5%B0%BE%E6%96%9C%E6%9D%A0/","title":"Rsync / 结尾斜杠"},{"content":"\n好不容易下到一个ida，结果打开显示ida has almost crashed!\n解决 python的问题，进入到IDA Professional 9.0.app/Contents/MacOS后运行 ./idapyswitch\n任选一个python即可\nfrom看雪论坛\n","date":"2024-11-30T14:10:29+08:00","image":"/p/ida9-%E5%B4%A9%E6%BA%83%E8%A7%A3%E5%86%B3/image_hu_f4514bec521aa6a0.png","permalink":"/p/ida9-%E5%B4%A9%E6%BA%83%E8%A7%A3%E5%86%B3/","title":"Ida9 崩溃解决"},{"content":"我用英文系统也有快4年了，来说说我的感受吧。\n起因 我在上小学初中的时候也曾经尝试过将手机的语言设置为英语，不过均以找不到如何调整回来而告终😭。\n我最早使用的英文软件其实是fl studio（也是有过音乐梦捏）和Audacity。fl这个软件印象中是有汉化的，但是但是我只找到了界面的汉化，里面的插件是全英文的，于是我的啃英语之路就这么开始了。\n首先是术语，我用过Adobe全家桶（AE/AU/PR）里面的术语是相通的，但是的我处于虽然看不懂这个词的意思但是知道这个选项会带来什么样的变化。于是乎我完成了我的第一波原始积累～（不过这里有个问题，我积累的都是术语，和生活中更普遍的用法不完全吻合，这导致我之后在英语阅读理解的时候虽然能看懂但是需要自己联想一下，举个例子thread）\n其实后来这些软件也都慢慢有了中文汉化，在切换到汉化版本时候便有些豁然开朗的感觉（原来xxx的中文是xxx啊！）这第一波原始积累便完成了。\n得益于高中接触到了🪜（这是能说的吗），在注册了谷歌等一众国外APP之后，我的生活中就多了一些英语语境。首先依然是上面那些软件，我开始查看各种教程，免不了接触一些英文教程，便也只能靠着时不时抽风的自动翻译艰难度日。日积月累之下，常用词便比较熟悉了。\n再是高中的英语学习，规范的语言学习依旧是主力，事实证明那日日夜夜苦读阅读理解还是效果显著的。同时也开始了一些软件的汉化和教程制作工作（AVEE/Alight Motion，还有点别的但是我忘了）我的词汇量也在稳步上升中。在大学中，我终于将我的手机切换到了英文模式。\n发展 人人都说学计算机得学英语，但其实学过计算机就知道编程和英语没有半毛钱的关系。\n需要用到英语的时候只有在读API文档的时候和写API的时候，因为文档是别人写的。 而命名标识符的时候使用英语主要还是因为切换中英文输入很麻烦你看那打oi的变量全是abcdefg的，而要使命名有意义便只能使用英语\n拼音\n关于拼音其实很好解释，只要你学好了英语，使用英语就要比使用拼音更直观方便\n因为不需要来换转换语境，还省去了标记声调\n唯一的困难在于某些汉语实在是不好翻译，这种我觉得加个通用前缀然后直接汉语效率更高一点\n总之在写了n多代码之后，就已经离不开英语了\n收益 其实最大的收益其实就是别人找你借手机干活的时候发现是英语就还回来了🤣\n对我来说收益很大，因为我有很多地方需要接触英语，但是对于并不从事计算机行业的人来说或许接触不到这么多英语环境的东西。老婆她总是抱怨我的手机找不到东西:P，即使她英语并不差。\n困难 得益于平常只拿手机看qq，所以用起来其实没有任何障碍，常用的功能也都能通过图标记住，最大的不适感主要出现在日期的识别上。而且好歹是考过46级的人，将手机切换至英文真的没有想像中的那么难。\n真的出现困难的时候其实是翻找设置的时候，但是这其实是个词汇量的问题，设置里面包含了大量的术语。但是又由于设置是有普遍性的，所以一旦掌握了这些词汇，使用其他软件的设置时便也能举一反三\n选择 家母前些日子也将手机调整成了英文，因为在写论文。不过觉得通过这种方式学习的效果其实比较局限，它更适合作为一个督促你学习的方式，如果看不懂手机，说明依然需要继续学习。如果看的懂了那说明学有小成，等到可以流畅使用的时候就只是个人选择问题了。\n有需求才有改变，如果平常并不和英语打交道，其实没有必要切换成英文。\n","date":"2024-11-28T09:12:00+08:00","permalink":"/p/%E5%B0%86%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80%E5%88%87%E6%8D%A2%E8%87%B3%E8%8B%B1%E6%96%87%E7%9A%84%E6%84%9F%E5%8F%97/","title":"将系统语言切换至英文的感受"},{"content":"一直很好奇这种在某个提交中关闭issue是怎么做到的\n点进去仔细看发现\n看来只要符合某种格式即可\n根据GitHub官方文档，我们可以使用这些关键词：\nclose closes closed fix fixes fixed resolve resolves resolved 使用如下格式：\nLinked issue Syntax Example Issue in the same repository KEYWORD #ISSUE-NUMBER Closes #10 Issue in a different repository KEYWORD OWNER/REPOSITORY#ISSUE-NUMBER Fixes octo-org/octo-repo#100 Multiple issues Use full syntax for each issue Resolves #10, resolves #123, resolves octo-org/octo-repo#100 ","date":"2024-11-27T11:39:04+08:00","image":"/p/github%E7%94%A8%E6%8F%90%E4%BA%A4%E6%B6%88%E6%81%AF%E6%9D%A5%E5%85%B3%E9%97%ADissue/image-20241127113714800_hu_c378d4a28f933b2f.png","permalink":"/p/github%E7%94%A8%E6%8F%90%E4%BA%A4%E6%B6%88%E6%81%AF%E6%9D%A5%E5%85%B3%E9%97%ADissue/","title":"GitHub用提交消息来关闭issue"},{"content":"10进制 2进制 16进制 Q：为什么要这么做？ A：因为一堆0和1太长了，使用更大的进制可以减少长度。\n1 2 3 4 5 2 3 15 这是10进制 0101 0010 0011 1111 这是二进制 5 2 3 (15) 这是16进制 5 2 3 F 这是16进制，但是我们仅使用一个字符来表示(10-15我们用abcdef来表示) 你存到磁盘的东西到底长什么样子 我们小学二年级就学过，计算机存储的都是0和1，那么0和1怎么能变成文字/图片/音频/视频？\n编码 我们需要给出一个规则让数字和实物对应起来，这个规则就是编码。 比如在猪咪国，猪咪规定\n数字 文字 0 0 1 1 2 2 3 3 \u0026hellip; \u0026hellip; 9 只 10 猪 11 狗 12 猫 13 🐷 14 🐶 15 🐱 16 今 17 天 18 看到了 那么今 天 🐷 看到了 8 只 🐶就可以表示为16 17 18 8 9 14\n但是我们发现编码表太长了，一个16进制无法表示18个值，我们只能通过增加长度来解决这个问题，比如两个十六进制。\n于是乎，16 17 18 8 9 14 =\u0026gt; 10 11 12 08 09 0E这就是编码后的结果。\n10怎么来的： 一个F是15 我们给他加1，向前进位，本位归零 =\u0026gt; 10\n我们在解码的时候只需要反向查找编码表即可\n文件路径 Q：文件存好了，那么怎么找到这个文件？\nA：路径！\n我们用路径来定位一个文件(夹)，路径的最后有可能是文件夹，也有可能是文件。\n根目录（linux:/）：最外层的文件夹，在Windows上我们称之为盘符（C:\\,D:\\\u0026hellip;） 绝对路径：以盘符开头的路径，比如C:\\Users\\Administrator\\Desktop\\test.txt 相对路径：相对于某个文件的路径，比如test.txt 外层文件夹：.. 外2层文件夹：..\\..\\ \\: 路径分隔符，在linux和macos上是/ 他们看起来是这样的\n文件类型 \u0026amp; 后缀 众所周知，.exe/.msi 文件是 Windows 系统下的可执行文件 .app 文件是 macOS 系统下的可执行文件，.apk 文件则是 Android 系统下的的安装包。\n但是如果你把.ppt改成.exe它依然不能运行\n显然文件后缀并不是确定文件类型的标准\nMIME 类型 MIME 是一个文件类型的合集，每个MIME类型由两部分组成，前面是数据的大类别，例如声音audio、图象image等，后面定义具体的种类。 七种大类别：\nvideo mp4 =\u0026gt; .mp4 webm =\u0026gt; .webm x-msvideo =\u0026gt; .avi image jpeg =\u0026gt; .jpg / .jpeg png =\u0026gt; .png gif =\u0026gt; .gif application x-gzip =\u0026gt; .gz json =\u0026gt; .json text html =\u0026gt; .html css =\u0026gt; .css audio mp3 =\u0026gt; .mp3 ogg =\u0026gt; .ogg multipart message 不写了，剩下的还有好多。。。\n魔数 说了这么多，到底怎么判断一个文件的类型？我们需要魔数(Magic Number)。\n魔数：是一种用于识别文件类型和格式的短序列字节。它们通常位于文件的开头。\n还记得我们刚刚编码后的文件吗？10 11 12 08 09 0E，文件的开头并不是固定的，而是根据文件格式而变化的。 而对于图片（jpg）来说，文件开头是确定的FF D8。\n你可以参考这个Gist来查看更多魔数 File Magic Numbers\n后缀 那我们为什么还需要后缀？\n答：后缀可以在不读文件的情况下就确定文件类型，更快。\n那么现在你应该明白了，改后缀并不能防止百度/QQ审查你发送的文件。\n编程相关 环境变量 环境变量用来保存一些东西，在每个程序运行的时候都可获取到环境变量里面的值\n比如，在Windows下，%USERPROFILE%就是你的用户目录，%APPDATA% 是你用户数据的目录，你可以在文件管理器中的路径栏输入上述变量后回车，你应该会跳转到指定位置\n在windows下你可以通过右键开始菜单-\u0026gt;系统-\u0026gt;高级系统设置-\u0026gt;环境变量来修改环境变量\n命令行（那个黑框框） 我相信你没有使用过命令行，并且以后也不会使用命令行，除非你是写代码的\n命令行（黑框）是操作系统提供的一个用于执行命令的东西。通过输入不同的命令来控制操作系统和使用软件。\n举个例子，在Windows下，我们可以通过Win+R输入cmd进入命令行，然后输入dir查看当前目录的文件。如果你输入notepad.exe还会打开记事本\n命令的一般格式是\n1 命令名字 -选项1 -选项2 --参数3 参数3的输入 --参数4 参数4的输入 参数1 参数2 .... 拿移动文件举例子，将文件从C:\\Users\\Administrator\\Desktop\\test.txt移动到文件夹C:\\Users\\Administrator\\Desktop\\test2 注意这里我们使用了绝对路径\n1 2 move 文件路径 目标路径 move C:\\Users\\Administrator\\Desktop\\test.txt C:\\Users\\Administrator\\Desktop\\test2 工作目录 你在哪里打开了cmd，它的工作目录就在哪里。\n工作目录影响相对路径查找文件，他是从自己的工作目录为基准查找文件路径的。\ncmd使用cd /d d:\\xxx\\xxx来改变工作目录 linux/mac使用cd 路径\n所以使用黑框框其实很简单，就是需要记住命令的名字\nPATH 这个东西常见于黑框框，但是其实用的地方非常多\n还记得你刚刚输入的notepad.exe吗？为什么cmd可以帮你打开它，但随便输入一个名字告诉你找不到？\n答：PATH\nPATH 告诉黑框框在什么路径下可以找到软件。notepad.exe在C:\\Windows\\System32下，而PATH正好有这个路径，于是黑框框便可以找到它。\nPATH 通常包含多个路径，用:分割\n","date":"2024-11-26T12:02:17+08:00","image":"/p/computer-basics/cover_hu_bff1dd203bc68526.png","permalink":"/p/computer-basics/","title":"闲聊：一些跟如何使用计算机有关的基础知识"},{"content":"无意间看到这位的博客，里面的软件都非常有意思，作为补充，我在这里也分享一下我自己常用的软件\n基本 快捷搜索：Alfred 官网 是的我知道你要说spotlight了，但是alfred更快并且支持更多功能，比如剪贴板： 词典集成 以及超多扩展 不过这个其实真用处不大，除非你记得住\n浏览器：Arc 这东西真给我感觉有点Only Apple Can Do了\n因为Windows测试版本难用的要死，过几天就打不开了不知道什么毛病\n无框 带分栏 带弹出预览 使用快捷键来操作页面 啊这确实是我心目中理想的浏览器该有的样子✨ 为什么说这玩意Only Apple Can Do主要是和windows测试版一对比就能看出来Mac下这些界面元素的处理要比win好太多了一看就是用的系统提供的组件，win卡的不行。等更新咯，还能咋办\n图片 截图：Pixpin 嗯这不是个MacOnly软件，我是不是不该在这里分享，算了到时候再写一遍好了\npixpin现已支持MacOS！！！ 官网\n抄归抄，现在做的确实已经比snipaste要好多了\n出了个会员功能 感觉没啥大用，想支持的可以支持一下\nMisc 磁盘扫描：Disk Space Analyzer 不是我喜欢冷门软件，而是冷门软件更有性价比 相比于daisydiskapp，Disk Space Analyzer免费并且你可以直接在商店下载 垃圾清理：AppCleaner \u0026amp; UninstallPkg 谁告诉你Mac卸载软件和安卓一样点点卸载或者扔垃圾桶就完事了？\n会拉屎的，而且卸载了不会把屎也带走\n1 2 brew install appcleaner #卸载app brew install uninstallpkg #卸载pkg包 虚拟机：Parallel Desktop 哎大名鼎鼎的PD，真的非常好用，网上破解版也不少，可以去找找。\n不过 VMware Fusion 免费了，不想折腾来试试这个咯\nDev Android File Transfer 嗯，Only Apple Need This.\n和安卓传文件的，不如adb，凑活用吧\n终端：iTerm2 赶紧把自带的那坨扔了 官网\n一开始用的wezterm，但是发现没办法隐藏最上面那一行窗口标题啥的，于是就换了iTerm2 ","date":"2024-11-26T10:39:04+08:00","image":"/p/%E6%88%91%E7%9A%84-macos-%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/cover_hu_a12e7ec9a2a947a4.jpg","permalink":"/p/%E6%88%91%E7%9A%84-macos-%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/","title":"我的 MacOS 常用软件"},{"content":"Why 原来的hexo实在是过于老旧了，而且很慢。 今天其实是昨天半夜又心血来潮想搭一个记录一下生活，就想起来了hugo。\nHugo MacOS 直接用homebrew安装就好了，非常方便\n1 brew install hugo 主题不少，一眼就看中了Stack\n不过这个主题好像改的东西挺多，加载方式也不太一样，我用的模板\n不过我喜欢可以折叠的目录，于是我改了改。 你可以把依赖替换为我的fork版本RikaCelery/hugo-theme-stack\n1 2 3 4 5 6 7 8 [go.mod] module github.com/CaiJimmy/hugo-theme-stack-starter go 1.17 require github.com/CaiJimmy/hugo-theme-stack/v3 v3.29.0 // indirect + replace github.com/RikaCelery/hugo-theme-stack/v3 =\u0026gt; ./stack 然后运行一下\n1 hugo mod tidy 不得不说，hugo是真的快！\n","date":"2024-11-26T10:02:28+08:00","image":"/p/hi-hugo/cover_hu_e95a4276bf860a84.jpg","permalink":"/p/hi-hugo/","title":"👋Hi Hugo"}]